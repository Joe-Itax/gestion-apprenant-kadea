// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Formation {
  id          Int                            @id @default(autoincrement())
  createdAt   DateTime                       @default(now())
  updatedAt   DateTime                       @updatedAt
  designation String                         @unique
  description String
  duree       String
  Appartient  Appartient_Formation_Cohorte[]
  Apprenant   Apprenant[]
  Coach       Coach[]
}

model Apprenant {
  id                   Int        @id @default(autoincrement())
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  matricule            Int        @unique
  ordinateur           Ordinateur @relation(fields: [ordinateurId], references: [id])
  ordinateurId         Int
  cohorte              Cohorte    @relation(fields: [codeCohorte], references: [code])
  codeCohorte          Int
  formation            Formation  @relation(fields: [formationDesignation], references: [designation])
  formationDesignation String
  prenom               String
  nom                  String
  postnom              String
  date_naissance       DateTime
  adresse              String
  email                String     @unique
  password             String
  telephone            String
}

model Coach {
  id                       Int                        @id @default(autoincrement())
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  matricule                Int                        @unique
  formation                Formation                  @relation(fields: [formationId], references: [id])
  formationId              Int
  prenom                   String
  nom                      String
  postnom                  String
  date_naissance           DateTime
  adresse                  String
  email                    String                     @unique
  password                 String
  telephone                String
  Peut_Avoir_Coach_Session Peut_Avoir_Coach_Session[]
  Peut_Avoir_Coach_Cohorte Peut_Avoir_Coach_Cohorte[]
}

model Ordinateur {
  id         Int         @id @default(autoincrement())
  tag        String      @unique
  modele     String
  fabriquant String
  Apprenant  Apprenant[]
}

//Cohorte représente les différentes classes, le matin, midi et soir
model Cohorte {
  id                           Int                            @id @default(autoincrement())
  code                         Int                            @unique
  description                  String
  session                      Session                        @relation(fields: [idSession], references: [id])
  idSession                    Int
  Apprenant                    Apprenant[]
  Appartient_Formation_Cohorte Appartient_Formation_Cohorte[]
  Peut_Avoir_Coach_Cohorte     Peut_Avoir_Coach_Cohorte[]
}

//Session représente les différents promo année après année
model Session {
  id                       Int                        @id @default(autoincrement())
  annee                    String
  type                     String
  ville                    String
  Peut_Avoir_Coach_Session Peut_Avoir_Coach_Session[]
  Cohorte                  Cohorte[]
}

model Appartient_Formation_Cohorte {
  id          Int       @id @default(autoincrement())
  formation   Formation @relation(fields: [formationId], references: [id])
  formationId Int
  cohorte     Cohorte   @relation(fields: [codeCohorte], references: [code])
  codeCohorte Int
}

model Peut_Avoir_Coach_Session {
  id        Int     @id @default(autoincrement())
  coach     Coach   @relation(fields: [idCoach], references: [id])
  idCoach   Int
  session   Session @relation(fields: [idSession], references: [id])
  idSession Int
}

model Peut_Avoir_Coach_Cohorte {
  id          Int     @id @default(autoincrement())
  coach       Coach   @relation(fields: [idCoach], references: [id])
  idCoach     Int
  cohorte     Cohorte @relation(fields: [codeCohorte], references: [code])
  codeCohorte Int
}
